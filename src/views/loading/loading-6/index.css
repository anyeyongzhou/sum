* {
    /* 去除内外边距 */
    margin: 0;
    padding: 0;
}

/* 最外层容器样式 */
.container {
    width: 300px;
    height: 300px;
    /* border: 1px solid; */
    margin: 200px auto;
    display: grid;
    /* 开启网格布局 */
    /* 设置网格的行数 */
    grid-template-rows: repeat(3, 100px);
    /* 设置网格的列数 */
    grid-template-columns: repeat(3, 100px);
    transform: rotateX(45deg) rotateZ(45deg);
    transform-style: preserve-3d;
}

.box {
    /* border: 1px solid; */
    position: relative;
    /* 子绝父相，之后 box 所有的子元素的定位的参考点以 box 为参考点 */
    transform-style: preserve-3d;
    animation: move 1s infinite;
}

.a1,
.a2,
.a3 {
    width: 100%;
    height: 100%;
    position: absolute;
}

/* 接下来我们来设置每个魔方的 3 个面 */
.a1 {
    background-color: #05afd1;
}

.a2 {
    background-color: #f9c80e;
    transform: translate3d(50px, 0, -50px) rotateY(90deg);
}

.a3 {
    background-color: #b569d3;
    transform: translate3d(0px, 50px, -50px) rotateX(90deg);
}

/* 最后一步，我们需要让这个盒子动起来 */
/* 动起来就涉及到 CSS3 里面的动画 */

@keyframes move {
    0% {
        transform: translateZ(0px);
    }

    50% {
        transform: translateZ(200px);
    }

    100% {
        transform: translateZ(0px);
    }
}

/* 最最后一步，每一个盒子使用延迟就可以了 */
.box:nth-child(2){
    animation-delay: .05s;
}

.box:nth-child(3){
    animation-delay: .1s;
}

.box:nth-child(4){
    animation-delay: .15s;
}

.box:nth-child(5){
    animation-delay: .2s;
}

.box:nth-child(6){
    animation-delay: .25s;
}

.box:nth-child(7){
    animation-delay: .3s;
}

.box:nth-child(8){
    animation-delay: .35s;
}

.box:nth-child(9){
    animation-delay: .4s;
}